rootLogger.level = INFO
rootLogger.appenderRef.console.ref = ConsoleAppender

appender.console.name = ConsoleAppender
appender.console.type = CONSOLE
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %d{HH:mm:ss,SSS} %-5p %-60c %x - %m%n



# rootLogger.level = INFO:

# This sets the logging level for the root logger to INFO. This means that only log messages with a level of INFO or higher (like WARN, ERROR) will be logged. Messages with a lower level, such as DEBUG or TRACE, will be ignored.
# rootLogger.appenderRef.console.ref = ConsoleAppender:

# This configures the root logger to use an appender named ConsoleAppender. An appender is responsible for sending log messages to a particular destination—in this case, the console (standard output).
# appender.console.name = ConsoleAppender:

# This defines the name of the appender as ConsoleAppender. The name is used to reference this appender in other parts of the configuration.
# appender.console.type = CONSOLE:

# This specifies that the appender type is CONSOLE. This means that the appender will output log messages to the console.
# appender.console.layout.type = PatternLayout:

# This sets the layout of the appender to PatternLayout. PatternLayout allows you to format the log messages according to a specified pattern.
# appender.console.layout.pattern = %d{HH:mm:ss,SSS} %-5p %-60c %x - %m%n:

# This defines the pattern used by PatternLayout to format the log messages:
# %d{HH:mm:ss,SSS}: Prints the date and time of the log event, formatted as hours, minutes, seconds, and milliseconds.
# %-5p: Prints the log level (like INFO, WARN) with a minimum width of 5 characters, left-justified.
# %-60c: Prints the logger’s name (or class name) with a minimum width of 60 characters, left-justified.
# %x: Prints the NDC (nested diagnostic context) if used. This is optional and may be omitted if not used.
# - %m: Prints the actual log message.
# %n: Inserts a newline character after the log message.